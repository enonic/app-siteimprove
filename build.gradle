plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.app' version '2.0.0'
    id "com.github.node-gradle.node" version '2.2.3'
}

app {
    name = project.appName
    displayName = 'Siteimprove'
    vendorName = 'Enonic AS'
    vendorUrl = 'https://enonic.com'
    systemVersion = "${xpVersion}"
    devSourcePaths += file("$rootDir/../lib-admin-ui/src/main/resources")
}

dependencies {
    compile "com.enonic.xp:jaxrs-api:${xpVersion}"
    compile "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    include "com.enonic.lib:lib-thymeleaf:2.0.0"
    include 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    include 'org.apache.httpcomponents:httpclient:4.5.7'
    include 'com.google.code.gson:gson:2.8.5'
}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo()
}

node {
    download = true
    version = '11.9.0'
}


task flush( type: org.gradle.api.tasks.Delete, dependsOn: clean ) {
    description = 'Clean the project from built sources and dependencies'
    delete '.xp'
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
    delete 'node_modules'
}

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: '**/src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

task webpack( type: NpmTask, dependsOn: lint ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (ts, css, etc).'
    args = [ 'run', 'build' ]
    inputs.dir '.xp/dev'
    inputs.dir 'src/main'
    inputs.file 'webpack.config.js'
    inputs.file 'package.json'
    outputs.dir "${buildDir}/resources/main"
}

jar {
    exclude 'assets/**/*.ts'
    exclude 'assets/**/*.less'

    dependsOn += webpack
}

project.afterEvaluate {
    jar {
        bnd ('Private-Package': '!dev.*, *;-split-package:=merge-first')
    }
}

processResources.dependsOn += unpackDevResources

if ( hasProperty( 'env' ) )
{
    addBuildDependency()
    applyExcludedTasks()
}
def applyExcludedTasks() {
    def libAdminUi = gradle.includedBuild( 'lib-admin-ui' )
    Closure permittedTasks = { it == 'lint' || it == 'test' }
    def excludedTasks = gradle.startParameter.getExcludedTaskNames().findAll( permittedTasks )
    libAdminUi.getLoadedSettings().getStartParameter().setExcludedTaskNames( excludedTasks )
}

def addBuildDependency() {
    def buildTask = gradle.includedBuild( 'lib-admin-ui' ).task( ':build' )

    build.dependsOn += buildTask
    clean.dependsOn += gradle.includedBuild( 'lib-admin-ui' ).task( ':clean' )
    flush.dependsOn += gradle.includedBuild( 'lib-admin-ui' ).task( ':flush' )

    def webpackTask = tasks.findByPath( ':webpack' )
    def unpackDevResources = tasks.findByPath( ':unpackDevResources' )

    if ( webpackTask != null ) webpackTask.dependsOn += unpackDevResources
    unpackDevResources.dependsOn += buildTask
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}
