plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.app' version '3.0.0'
    id "com.github.node-gradle.node" version '3.1.1'
}

app {
    name = project.appName
    displayName = 'Siteimprove'
    vendorName = 'Enonic AS'
    vendorUrl = 'https://enonic.com'
    systemVersion = "${xpVersion}"
    devSourcePaths += file("$rootDir/../lib-admin-ui/src/main/resources")
}

configurations {
    devResources {
        attributes {
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, 'dev-resources'))
        }
    }
}

dependencies {
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.lib:lib-thymeleaf:2.0.1"
    include "com.enonic.lib:lib-http-client:2.2.1"
    include "com.enonic.lib:lib-cron:1.1.1"
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation "com.enonic.xp:testing:${xpVersion}"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo('dev')
}

node {
    download = true
    version = '15.8.0'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

test {
    useJUnitPlatform()
}

task copyDevResources {
    doLast {
        copy {
            from configurations.devResources.files.collect { zipTree( it ) }
            include 'dev/**'
            into '.xp'
        }
    }
}

npmInstall.dependsOn copyDevResources

task flush( type: org.gradle.api.tasks.Delete, dependsOn: clean ) {
    description = 'Clean the project from built sources and dependencies'
    delete '.xp'
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
    delete 'node_modules'
}

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: '**/src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

task webpack( type: NpmTask, dependsOn: lint ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (ts, css, etc).'
    args = [ 'run', 'build' ]
    inputs.dir '.xp/dev'
    inputs.dir 'src/main'
    inputs.file 'webpack.config.js'
    outputs.dir "${buildDir}/resources/main"
}

jar {
    exclude 'assets/**/*.ts'
    exclude 'assets/**/*.less'

    dependsOn += webpack
}

if ( hasProperty( 'env' ) && isLibAdminUiIncluded())
{
    addBuildDependency()
    applyExcludedTasks()
}

def applyExcludedTasks() {
    def libAdminUi = gradle.includedBuild('lib-admin-ui')
    Closure permittedTasks = { it == 'lint' || it == 'test' }
    def excludedTasks = gradle.startParameter.getExcludedTaskNames().findAll(permittedTasks)
    libAdminUi.getLoadedSettings().getStartParameter().setExcludedTaskNames(excludedTasks)
}

def addBuildDependency() {
    def libAdminBuildTask = gradle.includedBuild('lib-admin-ui').task(':build')
    copyDevResources.dependsOn += libAdminBuildTask
    build.dependsOn += libAdminBuildTask
    clean.dependsOn += gradle.includedBuild('lib-admin-ui').task(':clean')
    flush.dependsOn += gradle.includedBuild('lib-admin-ui').task(':flush')
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}

def isLibAdminUiIncluded() {
    return new File( '../lib-admin-ui' ).exists()
}
